generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum GameType {
  TICTACTOE
  CONNECT4
  CHECKERS
  REACTION
  COINFLIP
}

enum TxType {
  DEPOSIT
  WITHDRAW
  FEE
  STAKE
  PAYOUT
  REFUND
  COMMISSION
}

enum TxStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}

enum MatchState {
  WAITING
  ACTIVE
  COMPLETED
  CANCELLED
  FORFEITED
}

enum KycTier {
  NONE
  L1
  L2
}

enum OfferStatus {
  OPEN
  MATCHED
  CANCELLED
  EXPIRED
}

model User {
  id            String    @id @default(cuid())
  walletPubkey  String    @unique
  kycTier       KycTier   @default(NONE)
  country       String?
  language      String    @default("en")
  isOver18      Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  walletTxs     WalletTx[]
  offersCreated GameOffer[]  @relation("OfferCreator")
  matchesAsA    Match[]       @relation("PlayerA")
  matchesAsB    Match[]       @relation("PlayerB")
  affiliateOwned Affiliate?   @relation("AffiliateOwner")
  attribution   Attribution?
  payouts       AffiliatePayout[]

  @@index([walletPubkey])
}

model Affiliate {
  id        String   @id @default(cuid())
  code      String   @unique
  ownerId   String   @unique
  owner     User     @relation("AffiliateOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  // Relations
  attributions Attribution[]
  payouts      AffiliatePayout[]

  @@index([code])
}

model Attribution {
  id              String    @id @default(cuid())
  affiliateId     String
  affiliate       Affiliate @relation(fields: [affiliateId], references: [id], onDelete: Cascade)
  userId          String    @unique
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  firstDepositAt  DateTime?
  createdAt       DateTime  @default(now())

  @@index([affiliateId])
  @@index([userId])
}

model WalletTx {
  id             String   @id @default(cuid())
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  type           TxType
  amountLamports BigInt
  txSig          String?
  status         TxStatus @default(PENDING)
  metadata       Json?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([userId])
  @@index([status])
  @@index([createdAt])
}

model GameOffer {
  id             String       @id @default(cuid())
  creatorId      String
  creator        User         @relation("OfferCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  gameType       GameType
  stakeLamports  BigInt
  feeLamports    BigInt
  timerCfgJson   Json?
  status         OfferStatus  @default(OPEN)
  createdAt      DateTime     @default(now())
  expiresAt      DateTime?

  // Relations
  match          Match?

  @@index([status])
  @@index([gameType])
  @@index([createdAt])
}

model Match {
  id                  String      @id @default(cuid())
  offerId             String      @unique
  offer               GameOffer   @relation(fields: [offerId], references: [id], onDelete: Cascade)
  playerAId           String
  playerA             User        @relation("PlayerA", fields: [playerAId], references: [id], onDelete: Cascade)
  playerBId           String
  playerB             User        @relation("PlayerB", fields: [playerBId], references: [id], onDelete: Cascade)
  gameType            GameType
  stakeLamports       BigInt
  feePerPlayerLamports BigInt
  state               MatchState  @default(WAITING)
  result              String?
  resultMetaJson      Json?
  startedAt           DateTime?
  endedAt             DateTime?
  createdAt           DateTime    @default(now())

  // Relations
  moveLogs            MoveLog[]

  @@index([state])
  @@index([playerAId])
  @@index([playerBId])
  @@index([createdAt])
}

model MoveLog {
  id          String   @id @default(cuid())
  matchId     String
  match       Match    @relation(fields: [matchId], references: [id], onDelete: Cascade)
  ply         Int
  payloadHash String
  payload     Json
  createdAt   DateTime @default(now())

  @@index([matchId])
  @@index([ply])
}

model AffiliatePayout {
  id             String   @id @default(cuid())
  affiliateId    String
  affiliate      Affiliate @relation(fields: [affiliateId], references: [id], onDelete: Cascade)
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  period         String
  rakeLamports   BigInt
  commissionPct  Float
  amountLamports BigInt
  status         TxStatus @default(PENDING)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([affiliateId])
  @@index([userId])
  @@index([status])
}
